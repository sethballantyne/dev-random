/*Copyright (c) 2014 Seth Ballantyne <seth.ballantyne@gmail.com>
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in
*all copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*THE SOFTWARE.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace BugFSK
{
    /// <summary>
    /// 
    /// </summary>
    public static class XMLFile
    {
        //
        static XmlWriter xmlWriter = null;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filename"></param>
        /// <returns></returns>
        public static Project[] Read(string filename)
        {
            XElement xelement = XElement.Load("XMLFile.xml");
            IEnumerable<XElement> query = from q in xelement.Elements("project") select q;
            List<Project> projects = new List<Project>();

            foreach (var w in query)
            {
                int autoInc = 0;
                string projectName = (string) w.Attribute("name");
                string projectID = (string)w.Attribute("id");
                Int32.TryParse((string)w.Attribute("autoIncrementValue"), out autoInc);

                List<Bug> issues = new List<Bug>();
                foreach (var issue in w.Elements("issue"))
                {
                    Bug parsedBug = new Bug();
                    parsedBug.Title = (string)issue.Attribute("title");
                    parsedBug.ID = (string)issue.Attribute("id");
                    parsedBug.Priority = (Priority) Enum.Parse(typeof(Priority),(string)issue.Attribute("priority"));
                    parsedBug.Description = (string)issue.Element("description");
                    parsedBug.Type = (string)issue.Attribute("type");
                    parsedBug.Status = (Status)Enum.Parse(typeof(Status), (string)issue.Attribute("status"));

                    issues.Add(parsedBug); 
                }

                projects.Add(new Project(projectName, projectID, autoInc, issues.ToArray()));
            }

            return projects.ToArray();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filename"></param>
        /// <param name="projects"></param>
        public static void Write(string filename, Project[] projects)
        {
            using (xmlWriter = XmlWriter.Create(filename))
            {
                xmlWriter.WriteComment("Generated by a program. Modifying by hand may result in interesting times.");
                xmlWriter.WriteStartElement("projects");

                for (int i = 0; i < projects.Length; i++)
                {
                    xmlWriter.WriteStartElement("project");
                    xmlWriter.WriteAttributeString("name", projects[i].Name);
                    xmlWriter.WriteAttributeString("id", projects[i].ID);
                    xmlWriter.WriteAttributeString("autoIncrementValue", Convert.ToString(projects[i].NextIDValue));

                    Bug[] bugs = projects[i].GetBugs();
                    if (bugs != null)
                    {
                        for (int j = 0; j < bugs.Length; j++)
                        {
                            xmlWriter.WriteStartElement("issue");
                            xmlWriter.WriteAttributeString("type", bugs[j].Type);
                            xmlWriter.WriteAttributeString("title", bugs[j].Title);
                            xmlWriter.WriteAttributeString("id", bugs[j].ID);
                            xmlWriter.WriteAttributeString("priority", bugs[j].Priority.ToString());
                            xmlWriter.WriteAttributeString("status", bugs[j].Status.ToString());
                            xmlWriter.WriteElementString("description", bugs[j].Description);
                            
                            xmlWriter.WriteEndElement(); // </issue>
                        }
                    }
                    xmlWriter.WriteEndElement(); // </project>
                }
                xmlWriter.WriteEndElement(); // </projects>
            }
        }

    }
}
